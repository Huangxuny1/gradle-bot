/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package org.gradle.bot

import io.vertx.core.AbstractVerticle
import io.vertx.core.Launcher
import io.vertx.core.Promise
import io.vertx.core.http.HttpServerResponse
import io.vertx.core.json.Json
import io.vertx.ext.web.Router
import io.vertx.ext.web.handler.BodyHandler
import io.vertx.kotlin.core.http.httpServerOptionsOf
import org.gradle.bot.handler.GitHubWebHookHandler
import org.gradle.bot.handler.TeamCityWebHookHandler
import java.util.logging.Logger


data class Country(val name: String, val code: String)

data class Island(val name: String, val country: Country)

fun main() {
    Launcher.main(arrayOf("run", MainVerticle::class.java.name,
            "--launcher-class=${MainVerticle::class.java.name}"))
}

@Suppress("unused")
class MainVerticle : AbstractVerticle() {
    private val logger: Logger = Logger.getLogger(MainVerticle::class.java.name)
    override fun start(startFuture: Promise<Void>) {
        val router = createRouter()

        val serverOptions = httpServerOptionsOf(host = "localhost", port = 8080, ssl = false, compressionSupported = true)
        vertx.createHttpServer(serverOptions)
                .requestHandler(router)
                .listen { result ->
                    logger.info("App start result: ${result.succeeded()}")
                    if (result.succeeded()) {
                        startFuture.complete()
                    } else {
                        startFuture.fail(result.cause())
                    }
                }
    }

    private fun createRouter() = Router.router(vertx).apply {
        route("/*").handler(BodyHandler.create())
        post("/github").handler(GitHubWebHookHandler())
        post("/teamcity").handler(TeamCityWebHookHandler())
        errorHandler(500) { it?.failure()?.printStackTrace() }
    }

    /**
     * Extension to the HTTP response to output JSON objects.
     */
    fun HttpServerResponse.endWithJson(obj: Any) {
        this.putHeader("Content-Type", "application/json; charset=utf-8").end(Json.encodePrettily(obj))
    }
}
